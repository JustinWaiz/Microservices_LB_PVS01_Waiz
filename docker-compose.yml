services:
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: stockmarket
      RABBITMQ_DEFAULT_PASS: supersecret123
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rabbitmq-network
  stock-publisher:
    image: justin799/stock-publisher
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://stockmarket:supersecret123@rabbitmq:5672/
    networks:
      - rabbitmq-network
    restart: always
  mongo1:
    image: mongo:7.0
    ports:
      - 27017:27017
    container_name: mongo1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - mongo1-data:/data/db
      - mongo1-config:/data/configdb
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'try { rs.status() } catch (err) { rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"host.docker.internal:27017\",priority:1},{_id:1,host:\"host.docker.internal:27018\",priority:0.5},{_id:2,host:\"host.docker.internal:27019\",priority:0.5}]}) }' | mongosh --port 27017 --quiet"]
      interval: 10s
      retries: 5
    networks:
      - mongodb-network
  mongo2:
    image: mongo:7.0
    ports:
      - 27018:27018
    container_name: mongo2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - mongo2-data:/data/db
      - mongo2-config:/data/configdb
    networks:
      - mongodb-network
  mongo3:
    image: mongo:7.0
    ports:
      - 27019:27019
    container_name: mongo3
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - mongo3-data:/data/db
      - mongo3-config:/data/configdb
    networks:
      - mongodb-network
  consumer-aapl:
    image: justin799/consumer:2
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: stockmarket
      RABBITMQ_PASS: supersecret123
      RABBITMQ_QUEUE: AAPL
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "mongosh 'mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0' --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - rabbitmq-network
      - mongodb-network
  consumer-msft:
    image: justin799/consumer:2
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: stockmarket
      RABBITMQ_PASS: supersecret123
      RABBITMQ_QUEUE: MSFT
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "mongosh 'mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0' --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - rabbitmq-network
      - mongodb-network    
  consumer-tsla:
    image: justin799/consumer:2
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: stockmarket
      RABBITMQ_PASS: supersecret123
      RABBITMQ_QUEUE: TSLA
      MONGODB_URI: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "mongosh 'mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0' --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - rabbitmq-network
      - mongodb-network    
  stock-liveview-1:
    image: justin799/stock-liveview
    ports:
      - 3001:3000
    container_name: stock-liveview-1
    healthcheck:
      test: ["CMD-SHELL", "mongosh 'mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0' --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    networks:
      - mongodb-network
      - frontend-network
  stock-liveview-2:
    image: justin799/stock-liveview
    ports:
      - 3002:3000
    container_name: stock-liveview-2
    healthcheck:
      test: ["CMD-SHELL", "mongosh 'mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0' --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      MONGODB_DB: stockmarket
      MONGODB_COLLECTION: stocks
    networks:
      - mongodb-network
      - frontend-network
  nginx:
    image: justin799/pvs-nginx
    container_name: nginx-loadbalancer
    ports:
      - "80:80"
    depends_on:
      - stock-liveview-1
      - stock-liveview-2
    networks:
      - frontend-network

volumes:
  mongo1-data:
  mongo1-config:
  mongo2-data:
  mongo2-config:
  mongo3-data:
  mongo3-config:

networks:
  rabbitmq-network:
    driver: bridge
  mongodb-network:
    driver: bridge
  frontend-network:
    driver: bridge